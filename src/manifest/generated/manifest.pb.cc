// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: manifest.proto
// Protobuf C++ Version: 5.29.3

#include "manifest.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kronos {
namespace manifest {
              template <typename>
PROTOBUF_CONSTEXPR FileManifest_MetadataEntry_DoNotUse::FileManifest_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : FileManifest_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : FileManifest_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct FileManifest_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileManifest_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileManifest_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FileManifest_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileManifest_MetadataEntry_DoNotUseDefaultTypeInternal _FileManifest_MetadataEntry_DoNotUse_default_instance_;

inline constexpr ChunkReference::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        offset_{::uint64_t{0u}},
        size_{0u},
        flags_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChunkReference::ChunkReference(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChunkReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkReferenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkReferenceDefaultTypeInternal() {}
  union {
    ChunkReference _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkReferenceDefaultTypeInternal _ChunkReference_default_instance_;

inline constexpr FileManifest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : chunks_{},
        metadata_{},
        file_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        original_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mime_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compression_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_size_{::uint64_t{0u}},
        version_{0u},
        checksum_{0u},
        created_at_{::int64_t{0}},
        modified_at_{::int64_t{0}},
        uncompressed_size_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FileManifest::FileManifest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FileManifestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileManifestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileManifestDefaultTypeInternal() {}
  union {
    FileManifest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileManifestDefaultTypeInternal _FileManifest_default_instance_;

inline constexpr ManifestBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : manifests_{},
        created_at_{::int64_t{0}},
        batch_version_{0u},
        manifest_count_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ManifestBatch::ManifestBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ManifestBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManifestBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManifestBatchDefaultTypeInternal() {}
  union {
    ManifestBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManifestBatchDefaultTypeInternal _ManifestBatch_default_instance_;
}  // namespace manifest
}  // namespace kronos
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_manifest_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_manifest_2eproto = nullptr;
const ::uint32_t
    TableStruct_manifest_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ChunkReference, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ChunkReference, _impl_.hash_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ChunkReference, _impl_.offset_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ChunkReference, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ChunkReference, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.file_hash_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.file_size_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.original_name_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.mime_type_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.modified_at_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.chunks_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.checksum_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.compression_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::FileManifest, _impl_.uncompressed_size_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ManifestBatch, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ManifestBatch, _impl_.manifests_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ManifestBatch, _impl_.batch_version_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ManifestBatch, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::kronos::manifest::ManifestBatch, _impl_.manifest_count_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kronos::manifest::ChunkReference)},
        {12, 22, -1, sizeof(::kronos::manifest::FileManifest_MetadataEntry_DoNotUse)},
        {24, -1, -1, sizeof(::kronos::manifest::FileManifest)},
        {44, -1, -1, sizeof(::kronos::manifest::ManifestBatch)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kronos::manifest::_ChunkReference_default_instance_._instance,
    &::kronos::manifest::_FileManifest_MetadataEntry_DoNotUse_default_instance_._instance,
    &::kronos::manifest::_FileManifest_default_instance_._instance,
    &::kronos::manifest::_ManifestBatch_default_instance_._instance,
};
const char descriptor_table_protodef_manifest_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016manifest.proto\022\017kronos.manifest\"K\n\016Chu"
    "nkReference\022\014\n\004hash\030\001 \001(\t\022\016\n\006offset\030\002 \001("
    "\004\022\014\n\004size\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\"\373\002\n\014FileM"
    "anifest\022\017\n\007version\030\001 \001(\r\022\021\n\tfile_hash\030\002 "
    "\001(\t\022\021\n\tfile_size\030\003 \001(\004\022\025\n\roriginal_name\030"
    "\004 \001(\t\022\021\n\tmime_type\030\005 \001(\t\022\022\n\ncreated_at\030\006"
    " \001(\003\022\023\n\013modified_at\030\007 \001(\003\022/\n\006chunks\030\010 \003("
    "\0132\037.kronos.manifest.ChunkReference\022=\n\010me"
    "tadata\030\t \003(\0132+.kronos.manifest.FileManif"
    "est.MetadataEntry\022\020\n\010checksum\030\n \001(\r\022\023\n\013c"
    "ompression\030\013 \001(\t\022\031\n\021uncompressed_size\030\014 "
    "\001(\r\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
    "ue\030\002 \001(\t:\0028\001\"\204\001\n\rManifestBatch\0220\n\tmanife"
    "sts\030\001 \003(\0132\035.kronos.manifest.FileManifest"
    "\022\025\n\rbatch_version\030\002 \001(\r\022\022\n\ncreated_at\030\003 "
    "\001(\003\022\026\n\016manifest_count\030\004 \001(\rb\006proto3"
};
static ::absl::once_flag descriptor_table_manifest_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_manifest_2eproto = {
    false,
    false,
    635,
    descriptor_table_protodef_manifest_2eproto,
    "manifest.proto",
    &descriptor_table_manifest_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_manifest_2eproto::offsets,
    file_level_enum_descriptors_manifest_2eproto,
    file_level_service_descriptors_manifest_2eproto,
};
namespace kronos {
namespace manifest {
// ===================================================================

class ChunkReference::_Internal {
 public:
};

ChunkReference::ChunkReference(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kronos.manifest.ChunkReference)
}
inline PROTOBUF_NDEBUG_INLINE ChunkReference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kronos::manifest::ChunkReference& from_msg)
      : hash_(arena, from.hash_),
        _cached_size_{0} {}

ChunkReference::ChunkReference(
    ::google::protobuf::Arena* arena,
    const ChunkReference& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChunkReference* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, offset_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, offset_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, offset_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:kronos.manifest.ChunkReference)
}
inline PROTOBUF_NDEBUG_INLINE ChunkReference::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : hash_(arena),
        _cached_size_{0} {}

inline void ChunkReference::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, offset_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, offset_) +
               sizeof(Impl_::flags_));
}
ChunkReference::~ChunkReference() {
  // @@protoc_insertion_point(destructor:kronos.manifest.ChunkReference)
  SharedDtor(*this);
}
inline void ChunkReference::SharedDtor(MessageLite& self) {
  ChunkReference& this_ = static_cast<ChunkReference&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.hash_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ChunkReference::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChunkReference(arena);
}
constexpr auto ChunkReference::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChunkReference),
                                            alignof(ChunkReference));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChunkReference::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChunkReference_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChunkReference::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChunkReference>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChunkReference::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChunkReference>(), &ChunkReference::ByteSizeLong,
            &ChunkReference::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_._cached_size_),
        false,
    },
    &ChunkReference::kDescriptorMethods,
    &descriptor_table_manifest_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChunkReference::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 43, 2> ChunkReference::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kronos::manifest::ChunkReference>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 flags = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkReference, _impl_.flags_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.flags_)}},
    // string hash = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.hash_)}},
    // uint64 offset = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ChunkReference, _impl_.offset_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.offset_)}},
    // uint32 size = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChunkReference, _impl_.size_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.size_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string hash = 1;
    {PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 offset = 2;
    {PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 size = 3;
    {PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 flags = 4;
    {PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\36\4\0\0\0\0\0\0"
    "kronos.manifest.ChunkReference"
    "hash"
  }},
};

PROTOBUF_NOINLINE void ChunkReference::Clear() {
// @@protoc_insertion_point(message_clear_start:kronos.manifest.ChunkReference)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  ::memset(&_impl_.offset_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChunkReference::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChunkReference& this_ = static_cast<const ChunkReference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChunkReference::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChunkReference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kronos.manifest.ChunkReference)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string hash = 1;
          if (!this_._internal_hash().empty()) {
            const std::string& _s = this_._internal_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.ChunkReference.hash");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint64 offset = 2;
          if (this_._internal_offset() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_offset(), target);
          }

          // uint32 size = 3;
          if (this_._internal_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_size(), target);
          }

          // uint32 flags = 4;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_flags(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kronos.manifest.ChunkReference)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChunkReference::ByteSizeLong(const MessageLite& base) {
          const ChunkReference& this_ = static_cast<const ChunkReference&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChunkReference::ByteSizeLong() const {
          const ChunkReference& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kronos.manifest.ChunkReference)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string hash = 1;
            if (!this_._internal_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_hash());
            }
            // uint64 offset = 2;
            if (this_._internal_offset() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_offset());
            }
            // uint32 size = 3;
            if (this_._internal_size() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_size());
            }
            // uint32 flags = 4;
            if (this_._internal_flags() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_flags());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChunkReference::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChunkReference*>(&to_msg);
  auto& from = static_cast<const ChunkReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kronos.manifest.ChunkReference)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_offset() != 0) {
    _this->_impl_.offset_ = from._impl_.offset_;
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkReference::CopyFrom(const ChunkReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kronos.manifest.ChunkReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChunkReference::InternalSwap(ChunkReference* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, &other->_impl_.hash_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.flags_)
      + sizeof(ChunkReference::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(ChunkReference, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::google::protobuf::Metadata ChunkReference::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              FileManifest_MetadataEntry_DoNotUse::FileManifest_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              FileManifest_MetadataEntry_DoNotUse::FileManifest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              FileManifest_MetadataEntry_DoNotUse::FileManifest_MetadataEntry_DoNotUse() : SuperType() {}
              FileManifest_MetadataEntry_DoNotUse::FileManifest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* FileManifest_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) FileManifest_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto FileManifest_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FileManifest_MetadataEntry_DoNotUse),
                                                          alignof(FileManifest_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull FileManifest_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_FileManifest_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &FileManifest_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<FileManifest_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &FileManifest_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &FileManifest_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(FileManifest_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &FileManifest_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_manifest_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* FileManifest_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2> FileManifest_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FileManifest_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kronos::manifest::FileManifest_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(FileManifest_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(FileManifest_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\3\5\0\0\0\0\0"
    "kronos.manifest.FileManifest.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class FileManifest::_Internal {
 public:
};

FileManifest::FileManifest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kronos.manifest.FileManifest)
}
inline PROTOBUF_NDEBUG_INLINE FileManifest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kronos::manifest::FileManifest& from_msg)
      : chunks_{visibility, arena, from.chunks_},
        metadata_{visibility, arena, from.metadata_},
        file_hash_(arena, from.file_hash_),
        original_name_(arena, from.original_name_),
        mime_type_(arena, from.mime_type_),
        compression_(arena, from.compression_),
        _cached_size_{0} {}

FileManifest::FileManifest(
    ::google::protobuf::Arena* arena,
    const FileManifest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FileManifest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, file_size_),
           offsetof(Impl_, uncompressed_size_) -
               offsetof(Impl_, file_size_) +
               sizeof(Impl_::uncompressed_size_));

  // @@protoc_insertion_point(copy_constructor:kronos.manifest.FileManifest)
}
inline PROTOBUF_NDEBUG_INLINE FileManifest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : chunks_{visibility, arena},
        metadata_{visibility, arena},
        file_hash_(arena),
        original_name_(arena),
        mime_type_(arena),
        compression_(arena),
        _cached_size_{0} {}

inline void FileManifest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_size_),
           0,
           offsetof(Impl_, uncompressed_size_) -
               offsetof(Impl_, file_size_) +
               sizeof(Impl_::uncompressed_size_));
}
FileManifest::~FileManifest() {
  // @@protoc_insertion_point(destructor:kronos.manifest.FileManifest)
  SharedDtor(*this);
}
inline void FileManifest::SharedDtor(MessageLite& self) {
  FileManifest& this_ = static_cast<FileManifest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.file_hash_.Destroy();
  this_._impl_.original_name_.Destroy();
  this_._impl_.mime_type_.Destroy();
  this_._impl_.compression_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FileManifest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FileManifest(arena);
}
constexpr auto FileManifest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.chunks_) +
          decltype(FileManifest::_impl_.chunks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.metadata_) +
          decltype(FileManifest::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.metadata_) +
          decltype(FileManifest::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(FileManifest), alignof(FileManifest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FileManifest::PlacementNew_,
                                 sizeof(FileManifest),
                                 alignof(FileManifest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FileManifest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FileManifest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FileManifest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FileManifest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FileManifest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FileManifest>(), &FileManifest::ByteSizeLong,
            &FileManifest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FileManifest, _impl_._cached_size_),
        false,
    },
    &FileManifest::kDescriptorMethods,
    &descriptor_table_manifest_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FileManifest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 95, 2> FileManifest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kronos::manifest::FileManifest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FileManifest, _impl_.version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.version_)}},
    // string file_hash = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.file_hash_)}},
    // uint64 file_size = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileManifest, _impl_.file_size_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.file_size_)}},
    // string original_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.original_name_)}},
    // string mime_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.mime_type_)}},
    // int64 created_at = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileManifest, _impl_.created_at_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.created_at_)}},
    // int64 modified_at = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileManifest, _impl_.modified_at_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.modified_at_)}},
    // repeated .kronos.manifest.ChunkReference chunks = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.chunks_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 checksum = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FileManifest, _impl_.checksum_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.checksum_)}},
    // string compression = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.compression_)}},
    // uint32 uncompressed_size = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FileManifest, _impl_.uncompressed_size_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.uncompressed_size_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 version = 1;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string file_hash = 2;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.file_hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 file_size = 3;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.file_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string original_name = 4;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.original_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mime_type = 5;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.mime_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 created_at = 6;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.created_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 modified_at = 7;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.modified_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .kronos.manifest.ChunkReference chunks = 8;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.chunks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, string> metadata = 9;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // uint32 checksum = 10;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.checksum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string compression = 11;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.compression_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 uncompressed_size = 12;
    {PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.uncompressed_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kronos::manifest::ChunkReference>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(FileManifest()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\34\0\11\0\15\11\0\0\0\10\0\13\0\0\0\0"
    "kronos.manifest.FileManifest"
    "file_hash"
    "original_name"
    "mime_type"
    "metadata"
    "compression"
  }},
};

PROTOBUF_NOINLINE void FileManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:kronos.manifest.FileManifest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_.Clear();
  _impl_.metadata_.Clear();
  _impl_.file_hash_.ClearToEmpty();
  _impl_.original_name_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.compression_.ClearToEmpty();
  ::memset(&_impl_.file_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.uncompressed_size_) -
      reinterpret_cast<char*>(&_impl_.file_size_)) + sizeof(_impl_.uncompressed_size_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FileManifest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FileManifest& this_ = static_cast<const FileManifest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FileManifest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FileManifest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kronos.manifest.FileManifest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 version = 1;
          if (this_._internal_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_version(), target);
          }

          // string file_hash = 2;
          if (!this_._internal_file_hash().empty()) {
            const std::string& _s = this_._internal_file_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.file_hash");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // uint64 file_size = 3;
          if (this_._internal_file_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_file_size(), target);
          }

          // string original_name = 4;
          if (!this_._internal_original_name().empty()) {
            const std::string& _s = this_._internal_original_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.original_name");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string mime_type = 5;
          if (!this_._internal_mime_type().empty()) {
            const std::string& _s = this_._internal_mime_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.mime_type");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // int64 created_at = 6;
          if (this_._internal_created_at() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<6>(
                    stream, this_._internal_created_at(), target);
          }

          // int64 modified_at = 7;
          if (this_._internal_modified_at() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<7>(
                    stream, this_._internal_modified_at(), target);
          }

          // repeated .kronos.manifest.ChunkReference chunks = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_chunks_size());
               i < n; i++) {
            const auto& repfield = this_._internal_chunks().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // map<string, string> metadata = 9;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.metadata");
              }
            }
          }

          // uint32 checksum = 10;
          if (this_._internal_checksum() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                10, this_._internal_checksum(), target);
          }

          // string compression = 11;
          if (!this_._internal_compression().empty()) {
            const std::string& _s = this_._internal_compression();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kronos.manifest.FileManifest.compression");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // uint32 uncompressed_size = 12;
          if (this_._internal_uncompressed_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                12, this_._internal_uncompressed_size(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kronos.manifest.FileManifest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FileManifest::ByteSizeLong(const MessageLite& base) {
          const FileManifest& this_ = static_cast<const FileManifest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FileManifest::ByteSizeLong() const {
          const FileManifest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kronos.manifest.FileManifest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kronos.manifest.ChunkReference chunks = 8;
            {
              total_size += 1UL * this_._internal_chunks_size();
              for (const auto& msg : this_._internal_chunks()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> metadata = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string file_hash = 2;
            if (!this_._internal_file_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_file_hash());
            }
            // string original_name = 4;
            if (!this_._internal_original_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_original_name());
            }
            // string mime_type = 5;
            if (!this_._internal_mime_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mime_type());
            }
            // string compression = 11;
            if (!this_._internal_compression().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_compression());
            }
            // uint64 file_size = 3;
            if (this_._internal_file_size() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_file_size());
            }
            // uint32 version = 1;
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_version());
            }
            // uint32 checksum = 10;
            if (this_._internal_checksum() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_checksum());
            }
            // int64 created_at = 6;
            if (this_._internal_created_at() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_created_at());
            }
            // int64 modified_at = 7;
            if (this_._internal_modified_at() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_modified_at());
            }
            // uint32 uncompressed_size = 12;
            if (this_._internal_uncompressed_size() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_uncompressed_size());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FileManifest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FileManifest*>(&to_msg);
  auto& from = static_cast<const FileManifest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kronos.manifest.FileManifest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_chunks()->MergeFrom(
      from._internal_chunks());
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_file_hash().empty()) {
    _this->_internal_set_file_hash(from._internal_file_hash());
  }
  if (!from._internal_original_name().empty()) {
    _this->_internal_set_original_name(from._internal_original_name());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_compression().empty()) {
    _this->_internal_set_compression(from._internal_compression());
  }
  if (from._internal_file_size() != 0) {
    _this->_impl_.file_size_ = from._impl_.file_size_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  if (from._internal_checksum() != 0) {
    _this->_impl_.checksum_ = from._impl_.checksum_;
  }
  if (from._internal_created_at() != 0) {
    _this->_impl_.created_at_ = from._impl_.created_at_;
  }
  if (from._internal_modified_at() != 0) {
    _this->_impl_.modified_at_ = from._impl_.modified_at_;
  }
  if (from._internal_uncompressed_size() != 0) {
    _this->_impl_.uncompressed_size_ = from._impl_.uncompressed_size_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FileManifest::CopyFrom(const FileManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kronos.manifest.FileManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FileManifest::InternalSwap(FileManifest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunks_.InternalSwap(&other->_impl_.chunks_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_hash_, &other->_impl_.file_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.original_name_, &other->_impl_.original_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_type_, &other->_impl_.mime_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.compression_, &other->_impl_.compression_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.uncompressed_size_)
      + sizeof(FileManifest::_impl_.uncompressed_size_)
      - PROTOBUF_FIELD_OFFSET(FileManifest, _impl_.file_size_)>(
          reinterpret_cast<char*>(&_impl_.file_size_),
          reinterpret_cast<char*>(&other->_impl_.file_size_));
}

::google::protobuf::Metadata FileManifest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ManifestBatch::_Internal {
 public:
};

ManifestBatch::ManifestBatch(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kronos.manifest.ManifestBatch)
}
inline PROTOBUF_NDEBUG_INLINE ManifestBatch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kronos::manifest::ManifestBatch& from_msg)
      : manifests_{visibility, arena, from.manifests_},
        _cached_size_{0} {}

ManifestBatch::ManifestBatch(
    ::google::protobuf::Arena* arena,
    const ManifestBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ManifestBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, created_at_),
           offsetof(Impl_, manifest_count_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::manifest_count_));

  // @@protoc_insertion_point(copy_constructor:kronos.manifest.ManifestBatch)
}
inline PROTOBUF_NDEBUG_INLINE ManifestBatch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : manifests_{visibility, arena},
        _cached_size_{0} {}

inline void ManifestBatch::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, manifest_count_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::manifest_count_));
}
ManifestBatch::~ManifestBatch() {
  // @@protoc_insertion_point(destructor:kronos.manifest.ManifestBatch)
  SharedDtor(*this);
}
inline void ManifestBatch::SharedDtor(MessageLite& self) {
  ManifestBatch& this_ = static_cast<ManifestBatch&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ManifestBatch::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ManifestBatch(arena);
}
constexpr auto ManifestBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.manifests_) +
          decltype(ManifestBatch::_impl_.manifests_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ManifestBatch), alignof(ManifestBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ManifestBatch::PlacementNew_,
                                 sizeof(ManifestBatch),
                                 alignof(ManifestBatch));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ManifestBatch::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ManifestBatch_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ManifestBatch::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ManifestBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ManifestBatch::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ManifestBatch>(), &ManifestBatch::ByteSizeLong,
            &ManifestBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_._cached_size_),
        false,
    },
    &ManifestBatch::kDescriptorMethods,
    &descriptor_table_manifest_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ManifestBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> ManifestBatch::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kronos::manifest::ManifestBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 manifest_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ManifestBatch, _impl_.manifest_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.manifest_count_)}},
    // repeated .kronos.manifest.FileManifest manifests = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.manifests_)}},
    // uint32 batch_version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ManifestBatch, _impl_.batch_version_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.batch_version_)}},
    // int64 created_at = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ManifestBatch, _impl_.created_at_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.created_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kronos.manifest.FileManifest manifests = 1;
    {PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.manifests_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 batch_version = 2;
    {PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.batch_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int64 created_at = 3;
    {PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.created_at_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint32 manifest_count = 4;
    {PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.manifest_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kronos::manifest::FileManifest>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ManifestBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:kronos.manifest.ManifestBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.manifests_.Clear();
  ::memset(&_impl_.created_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.manifest_count_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.manifest_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ManifestBatch::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ManifestBatch& this_ = static_cast<const ManifestBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ManifestBatch::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ManifestBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kronos.manifest.ManifestBatch)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .kronos.manifest.FileManifest manifests = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_manifests_size());
               i < n; i++) {
            const auto& repfield = this_._internal_manifests().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 batch_version = 2;
          if (this_._internal_batch_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_batch_version(), target);
          }

          // int64 created_at = 3;
          if (this_._internal_created_at() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_created_at(), target);
          }

          // uint32 manifest_count = 4;
          if (this_._internal_manifest_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_manifest_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kronos.manifest.ManifestBatch)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ManifestBatch::ByteSizeLong(const MessageLite& base) {
          const ManifestBatch& this_ = static_cast<const ManifestBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ManifestBatch::ByteSizeLong() const {
          const ManifestBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kronos.manifest.ManifestBatch)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kronos.manifest.FileManifest manifests = 1;
            {
              total_size += 1UL * this_._internal_manifests_size();
              for (const auto& msg : this_._internal_manifests()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // int64 created_at = 3;
            if (this_._internal_created_at() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_created_at());
            }
            // uint32 batch_version = 2;
            if (this_._internal_batch_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_batch_version());
            }
            // uint32 manifest_count = 4;
            if (this_._internal_manifest_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_manifest_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ManifestBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ManifestBatch*>(&to_msg);
  auto& from = static_cast<const ManifestBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kronos.manifest.ManifestBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_manifests()->MergeFrom(
      from._internal_manifests());
  if (from._internal_created_at() != 0) {
    _this->_impl_.created_at_ = from._impl_.created_at_;
  }
  if (from._internal_batch_version() != 0) {
    _this->_impl_.batch_version_ = from._impl_.batch_version_;
  }
  if (from._internal_manifest_count() != 0) {
    _this->_impl_.manifest_count_ = from._impl_.manifest_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ManifestBatch::CopyFrom(const ManifestBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kronos.manifest.ManifestBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ManifestBatch::InternalSwap(ManifestBatch* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.manifests_.InternalSwap(&other->_impl_.manifests_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.manifest_count_)
      + sizeof(ManifestBatch::_impl_.manifest_count_)
      - PROTOBUF_FIELD_OFFSET(ManifestBatch, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata ManifestBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace manifest
}  // namespace kronos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_manifest_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
