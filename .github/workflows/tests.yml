name: Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main] # Or your default branch
permissions:
  contents: read

jobs:
  warm:
    uses: ./.github/workflows/matrix-warm.yml
    with:
      build_type: Debug
      enable_onnx: false

  tests:
    needs: warm
    if: ${{ success() }}
    name: Tests (${{ matrix.suffix }})
    env:
      BUILD_DIR: build/yams-debug
    strategy:
      fail-fast: false
      matrix:
        include:
          - suffix: linux-x86_64
            runs_on: ubuntu-24.04
            conan_host_profile: ./conan/profiles/host-linux-clang
            conan_arch: x86_64
            needs_rosetta: false
            build_type: Debug
            coverage: true
            extra_meson_flags: "--buildtype=debug -Dbuild-tests=true -Denable-onnx=disabled"
          - suffix: linux-arm64
            runs_on: ubuntu-24.04-arm
            conan_host_profile: ./conan/profiles/host-linux-clang
            conan_arch: armv8
            needs_rosetta: false
            build_type: Debug
            coverage: false
            extra_meson_flags: "--buildtype=debug -Dbuild-tests=true -Denable-onnx=disabled"
          - suffix: macos-arm64
            runs_on: macos-15
            conan_host_profile: ./conan/profiles/host-macos-apple-clang
            conan_arch: armv8
            needs_rosetta: false
            build_type: Debug
            coverage: false
            extra_meson_flags: "--buildtype=debug -Dbuild-tests=true -Denable-onnx=disabled"
          - suffix: macos-x86_64
            runs_on: macos-13
            conan_host_profile: ./conan/profiles/host-macos-apple-clang-x86
            conan_arch: x86_64
            needs_rosetta: false
            build_type: Debug
            coverage: false
            extra_meson_flags: "--buildtype=debug -Dbuild-tests=true -Denable-onnx=disabled"
    runs-on: ${{ matrix.runs_on }}
    # Allow extra time for safety across runners.
    timeout-minutes: 70
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: false  # No submodules required; prevents stale gitlink errors
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          # Provide system Boost as a fallback per docs/BUILD-GCC.md when CMakeDeps resolution
          # is not detected by CMake (module mode will pick this up).
          # Install libbenchmark-dev for Google Benchmark support
          sudo apt-get install -y --no-install-recommends libboost-all-dev meson pkg-config libbenchmark-dev
          echo "Installed system Boost headers/libs for module-mode fallback"
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          brew update
          # Align with release workflow to ensure Meson builds have required toolchain bits.
          # Install google-benchmark for benchmark tests
          brew install pkg-config cmake ninja meson ccache boost google-benchmark || true
          # Guard against Homebrew reporting success without linking binaries (nondefault prefixes).
          command -v meson >/dev/null 2>&1 || python3 -m pip install --user --upgrade meson
          command -v ninja >/dev/null 2>&1 || python3 -m pip install --user --upgrade 'ninja>=1.10'
          echo "meson version: $(meson --version || echo 'missing')"
          echo "ninja version: $(ninja --version || echo 'missing')"
      - name: Cache Conan packages
        id: cache_conan
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan2/p
            ~/.conan2/r
            ~/.conan2/recipes
            ~/.conan2/metadata
            ~/.conan2/s
          key: conan2-${{ runner.os }}-${{ matrix.suffix }}-${{ hashFiles('conanfile.py', 'meson.build', 'meson_options.txt') }}
          restore-keys: |
            conan2-${{ runner.os }}-${{ matrix.suffix }}-
      - name: Conan cache diagnostics
        shell: bash
        run: |
          echo "Conan cache hit: ${{ steps.cache_conan.outputs.cache-hit }}"
          du -sh ~/.conan2/p 2>/dev/null || true
          ls ~/.conan2/r 2>/dev/null | head || true
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.suffix }}-${{ hashFiles('conanfile.py', 'meson.build', 'meson_options.txt') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.suffix }}-
      - name: Install Conan (latest)
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "macOS" ]; then
            brew update
            brew install pipx || true
            python3 -m pipx ensurepath || true
            pipx install --python python3 conan || pipx install conan
          else
            python3 -m pip install --user --upgrade pipx || true
            python3 -m pipx ensurepath || true
            pipx install --python python3 conan || pipx install conan || pip3 install --user --upgrade conan
          fi
          PY_USER_BIN="$(python3 -m site --user-base 2>/dev/null)/bin"
          [ -d "$PY_USER_BIN" ] && echo "$PY_USER_BIN" >> "$GITHUB_PATH" || true
          [ -d "$HOME/.local/bin" ] && echo "$HOME/.local/bin" >> "$GITHUB_PATH" || true
          export PATH="$HOME/.local/bin:$PY_USER_BIN:$PATH"
          conan --version
          mkdir -p ~/.conan2
          cp .conan/global.conf ~/.conan2/global.conf 2>/dev/null || true

      # Continue directly with build/test steps (single job path)
      - name: Install optional system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends liburing-dev libarchive-dev libtag1-dev ccache || true
          echo "Optional packages installed (best-effort)."

      - name: Setup ccache env
        shell: bash
        run: |
          set -euo pipefail
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
            # Limit size to balance cache reuse vs storage
          echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
          ccache -p 2>/dev/null || true
          ccache -z 2>/dev/null || true

      # Conan already installed above

      - name: Setup Conan Profile
        shell: bash
        run: |
          conan profile detect --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default || true
          echo "Conan profile configured:" >&2
          conan profile show >&2

      - name: Detect clang version (log only)
        shell: bash
        run: |
          set -euo pipefail
          if command -v clang++ >/dev/null 2>&1; then
            RAW_VER=$(clang++ --version | sed -n 's/.*version \([0-9][0-9]*\).*/\1/p' | head -1 || true)
          elif command -v clang >/dev/null 2>&1; then
            RAW_VER=$(clang --version | sed -n 's/.*version \([0-9][0-9]*\).*/\1/p' | head -1 || true)
          else
            RAW_VER=""
          fi
          if [ -n "$RAW_VER" ]; then
            echo "Detected clang major: $RAW_VER"
          else
            echo "WARNING: clang not found; default profile may resolve gcc instead" >&2
          fi

      - name: Clean corrupted Conan cache if needed
        shell: bash
        run: |
          if ! conan list "*" 2>/dev/null;
          then
            echo "Conan cache appears corrupted, cleaning locks and temp files..."
            conan cache clean --locks --temp 2>/dev/null || true
            echo "Conan cache locks/temp cleaned"
          fi

      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          brew update || true
          brew install pkg-config cmake ninja meson boost google-benchmark || true
          command -v meson >/dev/null 2>&1 || {
            python3 -m pip install --user --upgrade meson || pip3 install --user --upgrade meson || true
            [ -d "$HOME/.local/bin" ] && echo "$HOME/.local/bin" >> "$GITHUB_PATH" || true
          }
          echo "meson version: $(meson --version || echo 'missing')"
          echo "ninja version: $(ninja --version || echo 'missing')"

      - name: Tune Conan client (parallel downloads)
        shell: bash
        run: |
          set -euo pipefail
          CONF_FILE="$HOME/.conan2/global.conf"
          LINE="core.download:parallel=8"
          mkdir -p "$(dirname "$CONF_FILE")"
          if [ -f "$CONF_FILE" ]; then
            TMP_FILE="$(mktemp)"
            awk -v line="$LINE" '
              BEGIN { replaced = 0 }
              /^core.download:parallel=/ { if (!replaced) { print line; replaced = 1 } ; next }
              { print }
              END { if (!replaced) print line }
            ' "$CONF_FILE" > "$TMP_FILE"
            mv "$TMP_FILE" "$CONF_FILE"
          else
            printf '%s\n' "$LINE" > "$CONF_FILE"
          fi
          echo "Configured $LINE in $CONF_FILE"
          grep -n '^core.download:parallel=' "$CONF_FILE" || true
          conan config show core.download:parallel 2>/dev/null || true
          conan --version

      - name: Configure and Build with Meson
        shell: bash
        run: |
          set -euo pipefail
          ARCH_PREFIX=""
          if [ "${{ matrix.needs_rosetta }}" = "true" ]; then
            softwareupdate --install-rosetta --agree-to-license || true
            ARCH_PREFIX="arch -x86_64"
          fi
          rm -rf ${{ env.BUILD_DIR }}
          $ARCH_PREFIX conan install . \
            --output-folder="${{ env.BUILD_DIR }}" \
            -pr:b=default \
            -pr:h="${{ matrix.conan_host_profile }}" \
            -s build_type=Debug \
            -s:h arch=${{ matrix.conan_arch }} \
            -o "sqlite3/*:fts5=True" \
            -o "yams/*:build_tests=True" \
            -o "yams/*:enable_onnx=False" \
            --build=missing
          # Load Conan-generated environment (PKG_CONFIG_PATH, CFLAGS/LDFLAGS, etc.)
          CONAN_RUN_SCRIPT=$(find "${{ env.BUILD_DIR }}" -maxdepth 5 -type f -name "conanrun.sh" | head -n1)
          if [ -n "$CONAN_RUN_SCRIPT" ]; then
            echo "Sourcing Conan environment from $CONAN_RUN_SCRIPT"
            # shellcheck disable=SC1090
            # Temporarily disable set -u as Conan scripts may reference unset variables
            set +u
            source "$CONAN_RUN_SCRIPT"
            set -u
          else
            echo "::warning:: Conan run environment script not found under ${{ env.BUILD_DIR }}; relying on system toolchain" >&2
          fi
          # Relax noisy third-party warnings observed in CI (e.g., sign-compare from gtest)
          export CXXFLAGS="$CXXFLAGS -Wno-sign-compare -Wno-unused-result"
          # Robust Meson toolchain detection across Conan versions
          TOOLCHAIN_DIR="${{ env.BUILD_DIR }}/build-debug/conan"
          NATIVE_FILE="$TOOLCHAIN_DIR/conan_meson_native.ini"
          CROSS_FILE="$TOOLCHAIN_DIR/conan_meson_cross.ini"
          MESON_TOOL_ARG=()
          if [ -f "$NATIVE_FILE" ]; then
            MESON_TOOL_ARG=(--native-file "$NATIVE_FILE")
          elif [ -f "$CROSS_FILE" ]; then
            MESON_TOOL_ARG=(--cross-file "$CROSS_FILE")
          else
            echo "Meson toolchain file not found in $TOOLCHAIN_DIR; searching..." >&2
            FOUND_NATIVE=$(find "${{ env.BUILD_DIR }}" -maxdepth 5 -type f -name 'conan_meson_native.ini' | head -n1)
            FOUND_CROSS=$(find "${{ env.BUILD_DIR }}" -maxdepth 5 -type f -name 'conan_meson_cross.ini' | head -n1)
            if [ -n "$FOUND_NATIVE" ]; then
              MESON_TOOL_ARG=(--native-file "$FOUND_NATIVE")
            elif [ -n "$FOUND_CROSS" ]; then
              MESON_TOOL_ARG=(--cross-file "$FOUND_CROSS")
            else
              echo "ERROR: Conan Meson toolchain file not found under ${{ env.BUILD_DIR }}" >&2
              find "${{ env.BUILD_DIR }}" -maxdepth 5 -type f -name 'conan_meson_*.ini' >&2 || true
              exit 1
            fi
          fi
          echo "Using Meson toolchain arg: ${MESON_TOOL_ARG[*]}"
          # Keep AF_UNIX socket path short on Linux to avoid sun_path length limits
          if [ "$RUNNER_OS" = "Linux" ]; then
            XDG_RUNTIME_DIR="/run/user/$(id -u)"
            mkdir -p "$XDG_RUNTIME_DIR" || true
            echo "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" >> "$GITHUB_ENV"
          fi
          $ARCH_PREFIX meson setup ${{ env.BUILD_DIR }} "${MESON_TOOL_ARG[@]}" -Dwerror=false -Dwarning_level=2 ${{ matrix.extra_meson_flags }}
          $ARCH_PREFIX meson compile -C ${{ env.BUILD_DIR }}

      # - name: Check mobile ABI surface
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     LIB_PATH=$(find "${{ env.BUILD_DIR }}" -type f \( -name 'libyams_mobile*.so' -o -name 'libyams_mobile*.dylib' -o -name 'yams_mobile.dll' \) | head -n1)
      #     if [ -z "$LIB_PATH" ]; then
      #       echo "libyams_mobile shared library not found under ${{ env.BUILD_DIR }}" >&2
      #       exit 1
      #     fi
      #     scripts/ci/check_mobile_abi.sh "$LIB_PATH"

      

      - name: Run Tests with Meson (native)
        id: meson_tests_native
        if: ${{ !matrix.needs_rosetta }}
        shell: bash
        continue-on-error: true
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            mkdir -p "${XDG_RUNTIME_DIR:-/run/user/$(id -u)}" || true
            echo "Using XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
          fi
          cd ${{ env.BUILD_DIR }}
          meson test --print-errorlogs

      - name: Run Tests with Meson (Rosetta x86_64)
        id: meson_tests_rosetta
        if: ${{ matrix.needs_rosetta }}
        shell: bash
        continue-on-error: true
        run: |
          # Ensure Rosetta is present (idempotent)
          softwareupdate --install-rosetta --agree-to-license || true
          cd ${{ env.BUILD_DIR }}
          arch -x86_64 meson test --print-errorlogs

      - name: Upload test logs (artifacts)
        if: ${{ steps.meson_tests_native.outcome == 'failure' || steps.meson_tests_rosetta.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.suffix }}-${{ github.run_number }}
          path: |
            ${{ env.BUILD_DIR }}/meson-logs/
            ${{ env.BUILD_DIR }}/meson-info/
            ${{ env.BUILD_DIR }}/meson-logs/testlog.txt
            ${{ env.BUILD_DIR }}/build-debug/conan/**/*.log
          if-no-files-found: ignore
          retention-days: 14

      - name: Job Summary (artifacts link)
        if: always()
        shell: bash
        run: |
          echo "### Artifacts" >> "$GITHUB_STEP_SUMMARY"
          echo "[View artifacts for this run]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> "$GITHUB_STEP_SUMMARY"

      - name: Enforce failure on protected branches
        if: ${{ github.ref_protected && (steps.meson_tests_native.outcome == 'failure' || steps.meson_tests_rosetta.outcome == 'failure') }}
        shell: bash
        run: |
          echo "Meson tests reported failures; enforcing job failure for protected branch." >&2
          exit 1

      - name: Generate Coverage Report
        if: matrix.coverage == true
        shell: bash
        run: |
          pip3 install gcovr
          gcovr --root "$GITHUB_WORKSPACE" \
            --exclude 'tests/*' \
            --exclude '_deps/*' \
            --exclude 'build/*' \
            --html --html-details \
            --output "${{ env.BUILD_DIR }}/coverage.html"
          gcovr --root "$GITHUB_WORKSPACE" \
            --exclude 'tests/*' \
            --exclude '_deps/*' \
            --exclude 'build/*' \
            --xml --output "${{ env.BUILD_DIR }}/coverage.xml"
      - name: Upload Coverage Report
        if: matrix.coverage == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.BUILD_DIR }}/coverage.html
          if-no-files-found: error
          retention-days: 5
      - name: Upload Coverage XML
        if: matrix.coverage == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: ${{ env.BUILD_DIR }}/coverage.xml
          if-no-files-found: error
          retention-days: 5
      - name: Upload Benchmark Results
        if: github.actor != 'nektos/act' && matrix.conan_arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-linux-hosted-yams
          path: |
            ${{ env.BUILD_DIR }}/bench_results/**/*.json
            ${{ env.BUILD_DIR }}/bench_results/*.json
          if-no-files-found: ignore
          retention-days: 5
