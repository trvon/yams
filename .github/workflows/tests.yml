name: Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main] # Or your default branch
permissions:
  contents: write

jobs:
  warm:
    name: Warm Conan & ccache
    runs-on: ubuntu-latest
    # Increased timeout because first-time Debug dependency builds (LLVM/Boost/etc.) can exceed 15m on cache misses.
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache Conan packages (warm)
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.py', 'conan.lock', 'CMakePresets.json') }}
          restore-keys: |
            conan-${{ runner.os }}-
      - name: Cache ccache (warm)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('conanfile.py', 'conan.lock', 'CMakePresets.json') }}
          restore-keys: |
            ccache-${{ runner.os }}-
      - name: Install Conan (warm)
        shell: bash
        run: |
          pip3 install --no-cache-dir "conan>=2,<3" || python3 -m pip install "conan>=2,<3"
          conan --version
          mkdir -p ~/.conan2
          cp .conan/global.conf ~/.conan2/global.conf 2>/dev/null || true
      - name: Detect profile & install (Debug only)
        shell: bash
        run: |
          # Only Debug is required for test job; skipping Release halves cold start time.
          # If we later add a Release test/benchmark stage, re-introduce a Release preinstall here.
          conan profile detect --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default || true
          # Use CPU core count to speed recipe builds when they fall back to source builds.
          export CONAN_CPU_COUNT=$(nproc || getconf _NPROCESSORS_ONLN || echo 4)
          conan install . -of build/warm-debug -pr:h=conan/profiles/host-linux-clang -pr:b=default -s build_type=Debug -b missing
      - name: Summary
        run: |
          echo "Warm job completed" >> $GITHUB_STEP_SUMMARY

  run-tests:
    needs: [warm]
    runs-on: ubuntu-latest

    env:
      BUILD_DIR: build/yams-debug # Use debug build for tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure tags are available for version derivation if needed

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.py', 'conan.lock', 'CMakePresets.json') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('conanfile.py', 'conan.lock', 'CMakePresets.json') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install optional system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends liburing-dev libarchive-dev libtag1-dev ccache || true
          echo "Optional packages installed (best-effort)."

      - name: Setup ccache env
        shell: bash
        run: |
          set -euo pipefail
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
            # Limit size to balance cache reuse vs storage
          echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
          ccache -p 2>/dev/null || true
          ccache -z 2>/dev/null || true

      - name: Install Conan
        shell: bash
        run: |
          pip3 install conan || python3 -m pip install conan || python -m pip install conan
          conan --version
          mkdir -p ~/.conan2
          cp .conan/global.conf ~/.conan2/global.conf 2>/dev/null || true

      - name: Setup Conan Profile
        shell: bash
        run: |
          conan profile detect --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default || true
          echo "Conan profile configured:" >&2
          conan profile show >&2

      - name: Detect clang version (log only)
        shell: bash
        run: |
          set -euo pipefail
          if command -v clang++ >/dev/null 2>&1; then
            RAW_VER=$(clang++ --version | sed -n 's/.*version \([0-9][0-9]*\).*/\1/p' | head -1 || true)
          elif command -v clang >/dev/null 2>&1; then
            RAW_VER=$(clang --version | sed -n 's/.*version \([0-9][0-9]*\).*/\1/p' | head -1 || true)
          else
            RAW_VER=""
          fi
          if [ -n "$RAW_VER" ]; then
            echo "Detected clang major: $RAW_VER"
          else
            echo "WARNING: clang not found; default profile may resolve gcc instead" >&2
          fi

      - name: Clean corrupted Conan cache if needed
        shell: bash
        run: |
          if ! conan list "*" 2>/dev/null;
          then
            echo "Conan cache appears corrupted, cleaning locks and temp files..."
            conan cache clean --locks --temp 2>/dev/null || true
            echo "Conan cache locks/temp cleaned"
          fi

      - name: Configure CMake for Debug Build with Tests and Sanitizers
        shell: bash
        run: |
          rm -rf ${{ env.BUILD_DIR }}
          rm -f CMakeUserPresets.json
          conan install . \
            --output-folder=${{ env.BUILD_DIR }} \
            -pr:h=conan/profiles/host-linux-clang \
            -pr:b=default \
            -s build_type=Debug \
            --build=missing
          echo "--- Toolchain sanity (first toolchain file if present) ---"
          find ${{ env.BUILD_DIR }} -maxdepth 5 -name conan_toolchain.cmake -print -exec grep -E 'CMAKE_CXX_COMPILER' {} \; | head -20 || true
          cmake --preset yams-debug \
            -DYAMS_BUILD_PROFILE=dev \
            -DYAMS_BUILD_TESTS=ON \
            -DYAMS_ENABLE_SANITIZERS=ON \
            -DYAMS_ENABLE_COVERAGE=ON \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/stage" # Needed for install step if any
          echo "BUILD_DIR=${{ env.BUILD_DIR }}" >> $GITHUB_ENV # Ensure BUILD_DIR is available for subsequent steps

      - name: Build Project
        shell: bash
        run: |
          cmake --build --preset yams-debug

      - name: ccache stats (post-build)
        shell: bash
        run: |
          ccache -s || echo "ccache not available"

      - name: Run Tests
        shell: bash
        run: |
          cd ${{ env.BUILD_DIR }}
          ctest --output-on-failure -j$(nproc)

      - name: Generate Coverage Report
        shell: bash
        run: |
          # Install gcovr
          pip3 install gcovr

          # Generate HTML report
          gcovr --root "$GITHUB_WORKSPACE" \
                --exclude 'tests/*' \
                --exclude '_deps/*' \
                --exclude 'build/*' \
                --html --html-details \
                --output "${{ env.BUILD_DIR }}/coverage.html"

          # Generate XML report (for CI tools like Codecov)
          gcovr --root "$GITHUB_WORKSPACE" \
                --exclude 'tests/*' \
                --exclude '_deps/*' \
                --exclude 'build/*' \
                --xml --output "${{ env.BUILD_DIR }}/coverage.xml"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.BUILD_DIR }}/coverage.html
          retention-days: 5
      - name: Upload Coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: ${{ env.BUILD_DIR }}/coverage.xml
          retention-days: 5
