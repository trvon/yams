name: Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main] # Or your default branch
permissions:
  contents: write

jobs:
  tests:
    name: Tests (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86_64
            runs_on: ubuntu-latest
            build_type: Debug
            coverage: true
            extra_meson_flags: "--buildtype=debug -Dbuild-tests=true -Denable-onnx=disabled"
          - arch: armv8
            runs_on: ubuntu-24.04-arm
            build_type: Debug
            coverage: false
            extra_meson_flags: "--buildtype=debug -Dbuild-tests=true -Denable-onnx=disabled"
    runs-on: ${{ matrix.runs_on }}
    # Allow longer time for first-time ARM dependency builds.
    timeout-minutes: 50
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false  # No submodules required; prevents stale gitlink errors
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          # Provide system Boost as a fallback per docs/BUILD-GCC.md when CMakeDeps resolution
          # is not detected by CMake (module mode will pick this up).
          sudo apt-get install -y --no-install-recommends libboost-all-dev meson
          echo "Installed system Boost headers/libs for module-mode fallback"
      - name: Cache Conan packages
        id: cache_conan
        uses: actions/cache@v4
        with:
          path: |
            ~/.conan2/p
            ~/.conan2/r
            ~/.conan2/recipes
            ~/.conan2/metadata
            ~/.conan2/s
          key: conan2-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('conanfile.py', 'meson.build', 'meson_options.txt') }}
          restore-keys: |
            conan2-${{ runner.os }}-${{ matrix.arch }}-
      - name: Conan cache diagnostics
        shell: bash
        run: |
          echo "Conan cache hit: ${{ steps.cache_conan.outputs.cache-hit }}"
          du -sh ~/.conan2/p 2>/dev/null || true
          ls ~/.conan2/r 2>/dev/null | head || true
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('conanfile.py', 'conan.lock', 'CMakePresets.json') }}
          restore-keys: |
            ccache-${{ runner.os }}-
      - name: Install Conan (latest)
        shell: bash
        run: |
          pipx install conan 2>/dev/null || pip3 install --upgrade conan || python3 -m pip install --upgrade conan || python -m pip install --upgrade conan
          conan --version
          mkdir -p ~/.conan2
          cp .conan/global.conf ~/.conan2/global.conf 2>/dev/null || true
      - name: Install Debug deps (pre)
        shell: bash
        run: |
          # Only Debug is required for test job; skipping Release halves cold start time.
          # Disable ONNX to reduce dependency graph & build time.
          conan profile detect --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default || true
          export CONAN_CPU_COUNT=$(nproc || getconf _NPROCESSORS_ONLN || echo 4)
          conan install . -of build/warm-debug -pr:b=default -s build_type=Debug -o yams/*:build_tests=True -o yams/*:enable_onnx=False -b missing
      - name: Install Release deps (seed) (x86_64 only)
        if: matrix.arch == 'x86_64'
        shell: bash
        run: |
          export CONAN_CPU_COUNT=$(nproc || getconf _NPROCESSORS_ONLN || echo 4)
          conan install . -of build/warm-release -pr:h=conan/profiles/host-linux-clang -pr:b=default -s build_type=Release -b missing || true

      # Continue directly with build/test steps (single job path)
      - name: Set build dir env
        run: echo "BUILD_DIR=build/yams-debug" >> $GITHUB_ENV
      # (Cache & checkout already done above)

      - name: Install optional system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends liburing-dev libarchive-dev libtag1-dev ccache || true
          echo "Optional packages installed (best-effort)."

      - name: Setup ccache env
        shell: bash
        run: |
          set -euo pipefail
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
            # Limit size to balance cache reuse vs storage
          echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
          ccache -p 2>/dev/null || true
          ccache -z 2>/dev/null || true

      # Conan already installed above

      - name: Setup Conan Profile
        shell: bash
        run: |
          conan profile detect --force
          sed -i 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default || true
          echo "Conan profile configured:" >&2
          conan profile show >&2

      - name: Detect clang version (log only)
        shell: bash
        run: |
          set -euo pipefail
          if command -v clang++ >/dev/null 2>&1; then
            RAW_VER=$(clang++ --version | sed -n 's/.*version \([0-9][0-9]*\).*/\1/p' | head -1 || true)
          elif command -v clang >/dev/null 2>&1; then
            RAW_VER=$(clang --version | sed -n 's/.*version \([0-9][0-9]*\).*/\1/p' | head -1 || true)
          else
            RAW_VER=""
          fi
          if [ -n "$RAW_VER" ]; then
            echo "Detected clang major: $RAW_VER"
          else
            echo "WARNING: clang not found; default profile may resolve gcc instead" >&2
          fi

      - name: Clean corrupted Conan cache if needed
        shell: bash
        run: |
          if ! conan list "*" 2>/dev/null;
          then
            echo "Conan cache appears corrupted, cleaning locks and temp files..."
            conan cache clean --locks --temp 2>/dev/null || true
            echo "Conan cache locks/temp cleaned"
          fi

      - name: Configure and Build with Meson
        shell: bash
        run: |
          rm -rf ${{ env.BUILD_DIR }}
          conan install . \
            --output-folder=${{ env.BUILD_DIR }} \
            -pr:b=default \
            -s build_type=Debug \
            -o yams/*:build_tests=True \
            -o yams/*:enable_onnx=False \
            --build=missing
          meson setup ${{ env.BUILD_DIR }} --native-file ${{ env.BUILD_DIR }}/build-debug/conan/conan_meson_native.ini ${{ matrix.extra_meson_flags }}
          meson compile -C ${{ env.BUILD_DIR }}

      - name: Run Tests with Meson
        shell: bash
        run: |
          cd ${{ env.BUILD_DIR }}
          meson test --print-errorlogs

      - name: Generate Coverage Report
        if: matrix.coverage == true
        shell: bash
        run: |
          pip3 install gcovr
          gcovr --root "$GITHUB_WORKSPACE" \
            --exclude 'tests/*' \
            --exclude '_deps/*' \
            --exclude 'build/*' \
            --html --html-details \
            --output "${{ env.BUILD_DIR }}/coverage.html"
          gcovr --root "$GITHUB_WORKSPACE" \
            --exclude 'tests/*' \
            --exclude '_deps/*' \
            --exclude 'build/*' \
            --xml --output "${{ env.BUILD_DIR }}/coverage.xml"
      - name: Upload Coverage Report
        if: matrix.coverage == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.arch }}
          path: ${{ env.BUILD_DIR }}/coverage.html
          retention-days: 5
      - name: Upload Coverage XML
        if: matrix.coverage == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.arch }}
          path: ${{ env.BUILD_DIR }}/coverage.xml
          retention-days: 5
