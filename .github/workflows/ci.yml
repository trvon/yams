name: CI

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
  pull_request:
    branches: [main, master]

permissions:
  contents: read

jobs:
  build-test-package:
    name: Build, Test, and Package (${{ matrix.os }}, ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [conan, traditional]
        # No exclusions - enable all combinations

    env:
      BUILD_DIR: build
      INSTALL_PREFIX: prefix

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python (for Conan)
        if: matrix.build_type == 'conan'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config
          
          # Only install system deps for traditional build
          if [[ "${{ matrix.build_type }}" == "traditional" ]]; then
            sudo apt-get install -y \
              libssl-dev \
              libsqlite3-dev \
              libncurses-dev \
              protobuf-compiler
          fi

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew update
          brew install cmake
          
          # Only install system deps for traditional build
          if [[ "${{ matrix.build_type }}" == "traditional" ]]; then
            brew install openssl@3 sqlite3 protobuf
            # Make OpenSSL discoverable by CMake on macOS
            echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          fi

      - name: Install Conan
        if: matrix.build_type == 'conan'
        shell: bash
        run: |
          pip install conan
          conan --version
          
      - name: Configure with Conan
        if: matrix.build_type == 'conan'
        shell: bash
        run: |
          # Create default profile with C++20
          conan profile detect --force
          
          # Fix C++ standard to 20 instead of gnu17
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sed -i 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default
          else
            sed -i '' 's/compiler.cppstd=.*/compiler.cppstd=20/' ~/.conan2/profiles/default
          fi
          
          # Install dependencies
          conan install . --build=missing --settings=compiler.cppstd=20
          
          # Configure with CMake using Conan presets
          cmake --preset conan-release

      - name: Configure (Traditional CMake)
        if: matrix.build_type == 'traditional'
        shell: bash
        run: |
          CMAKE_ARGS="-DYAMS_BUILD_PROFILE=dev -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/${{ env.INSTALL_PREFIX }}"

          # Enable coverage on Linux builds
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            CMAKE_ARGS="$CMAKE_ARGS -DYAMS_ENABLE_COVERAGE=ON"
          fi

          cmake -S . -B "$BUILD_DIR" $CMAKE_ARGS

      - name: Build with Conan
        if: matrix.build_type == 'conan'
        shell: bash
        run: |
          cmake --build --preset conan-release

      - name: Build (Traditional)
        if: matrix.build_type == 'traditional'
        shell: bash
        run: |
          cmake --build "$BUILD_DIR" --parallel

      - name: Run tests
        shell: bash
        run: |
          if [[ "${{ matrix.build_type }}" == "conan" ]]; then
            ctest --test-dir build/Release --output-on-failure || true
          else
            ctest --test-dir "$BUILD_DIR" --output-on-failure
            ctest --test-dir "$BUILD_DIR" --output-on-failure -R '^consumer_'
          fi

      - name: Run benchmarks
        shell: bash
        run: |
          mkdir -p "$BUILD_DIR/bench_results"
          # Find all benchmark executables (named *_bench or *_bench.exe)
          mapfile -t benches < <(find "$BUILD_DIR" -type f \( -name "*_bench" -o -name "*_bench.exe" \) 2>/dev/null | sort)
          if [ ${#benches[@]} -eq 0 ]; then
            echo "No benchmark executables found."
          else
            for exe in "${benches[@]}"; do
              name=$(basename "$exe")
              out="$BUILD_DIR/bench_results/${name%.exe}.json"
              echo "Running $exe -> $out"
              "$exe" --benchmark_min_time=0.1 --benchmark_format=json --benchmark_out="$out" || true
            done
          fi

      - name: Generate coverage report (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          # Install gcovr if not present
          pip install gcovr || true

          # Generate coverage reports
          if command -v gcovr &> /dev/null; then
            gcovr --root . \
              --exclude '_deps/*' \
              --exclude 'tests/*' \
              --exclude '.*src/.*/benchmarks/.*' \
              --exclude 'tools/*' \
              --html --html-details \
              --output "$BUILD_DIR/coverage.html"

            gcovr --root . \
              --exclude '_deps/*' \
              --exclude 'tests/*' \
              --exclude '.*src/.*/benchmarks/.*' \
              --exclude 'tools/*' \
              --xml \
              --output "$BUILD_DIR/coverage.xml"

            # Display summary
            gcovr --root . \
              --exclude '_deps/*' \
              --exclude 'tests/*' \
              --exclude 'src/**/benchmarks/*' \
              --exclude 'tools/*'
          fi

      - name: Install
        shell: bash
        run: |
          if [[ "${{ matrix.build_type }}" == "conan" ]]; then
            cmake --install build/Release --config Release --prefix "$INSTALL_PREFIX"
          else
            cmake --install "$BUILD_DIR" --config Release --prefix "$INSTALL_PREFIX"
          fi
          # Verify installation succeeded
          if [ ! -d "$INSTALL_PREFIX" ]; then
            echo "ERROR: Install prefix directory does not exist!"
            exit 1
          fi
          echo "Installation contents:"
          ls -la "$INSTALL_PREFIX" || true

      - name: Upload installed prefix
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yams-install-${{ matrix.os }}-${{ matrix.build_type }}
          path: ${{ env.INSTALL_PREFIX }}
          if-no-files-found: error

      - name: Package (CPack)
        shell: bash
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # Generate default TGZ/ZIP packages if configured
          cpack -G TGZ || true
          cpack -G ZIP || true
          # List generated packages (if any)
          ls -la || true

      - name: Upload packages
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yams-packages-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            ${{ env.BUILD_DIR }}/*.tar.gz
            ${{ env.BUILD_DIR }}/*.tgz
            ${{ env.BUILD_DIR }}/*.zip
            build/Release/*.tar.gz
            build/Release/*.tgz
            build/Release/*.zip
          if-no-files-found: ignore

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: ${{ env.BUILD_DIR }}/bench_results
          if-no-files-found: ignore

      - name: Upload coverage report
        if: matrix.os == 'ubuntu-latest' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            ${{ env.BUILD_DIR }}/coverage.html
            ${{ env.BUILD_DIR }}/coverage.xml
          if-no-files-found: ignore

      - name: Upload CLI binary (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yams-cli-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            ${{ env.BUILD_DIR }}/tools/yams-cli/yams
            ${{ env.BUILD_DIR }}/tools/yams-cli/Debug/yams
            ${{ env.BUILD_DIR }}/tools/yams-cli/Release/yams
            build/Release/tools/yams-cli/yams
          if-no-files-found: ignore
