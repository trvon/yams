// Copyright 2025 YAMS Project
// SPDX-License-Identifier: Apache-2.0

#include <gtest/gtest.h>
#include <yams/metadata/tree_differ.h>
#include <yams/metadata/tree_builder.h>

namespace fs = std::filesystem;
using namespace yams::metadata;

class TreeDifferTest : public ::testing::Test {
protected:
    void SetUp() override {
        // Create empty tree nodes for testing
    }
    
    void TearDown() override {
    }
    
    TreeNode createEmptyTree() {
        return TreeNode();
    }
    
    TreeNode createSimpleTree() {
        TreeNode tree;
        TreeEntry entry;
        entry.mode = 0100644;
        entry.name = "file1.txt";
        entry.hash = "0000000000000000000000000000000000000000000000000000000000000001";
        entry.isDirectory = false;
        entry.size = 100;
        tree.addEntry(entry);
        return tree;
    }
    
    TreeNode createTreeWithMultipleFiles() {
        TreeNode tree;
        
        TreeEntry f1;
        f1.mode = 0100644;
        f1.name = "a.txt";
        f1.hash = "000000000000000000000000000000000000000000000000000000000000000a";
        f1.isDirectory = false;
        f1.size = 50;
        tree.addEntry(f1);
        
        TreeEntry f2;
        f2.mode = 0100644;
        f2.name = "b.txt";
        f2.hash = "000000000000000000000000000000000000000000000000000000000000000b";
        f2.isDirectory = false;
        f2.size = 75;
        tree.addEntry(f2);
        
        TreeEntry f3;
        f3.mode = 0100644;
        f3.name = "c.txt";
        f3.hash = "000000000000000000000000000000000000000000000000000000000000000c";
        f3.isDirectory = false;
        f3.size = 120;
        tree.addEntry(f3);
        
        return tree;
    }
};

// Test: Empty trees produce no changes
TEST_F(TreeDifferTest, EmptyTrees) {
    TreeDiffer differ;
    TreeNode base = createEmptyTree();
    TreeNode target = createEmptyTree();
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(0));
    EXPECT_EQ(result.value().filesAdded, 0);
    EXPECT_EQ(result.value().filesDeleted, 0);
    EXPECT_EQ(result.value().filesModified, 0);
}

// Test: Identical trees produce no changes
TEST_F(TreeDifferTest, IdenticalTrees) {
    TreeDiffer differ;
    TreeNode tree = createSimpleTree();
    
    auto result = differ.computeDiff(tree, tree);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(0));
    EXPECT_EQ(result.value().filesAdded, 0);
    EXPECT_EQ(result.value().filesDeleted, 0);
}

// Test: File added
TEST_F(TreeDifferTest, FileAdded) {
    TreeDiffer differ;
    TreeNode base = createEmptyTree();
    TreeNode target = createSimpleTree();
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().filesAdded, 1);
    EXPECT_EQ(result.value().filesDeleted, 0);
    
    const auto& change = result.value().changes[0];
    EXPECT_EQ(change.type, ChangeType::Added);
    EXPECT_EQ(change.newPath, "file1.txt");
    EXPECT_EQ(change.newHash, "hash1");
    EXPECT_FALSE(change.isDirectory);
}

// Test: File deleted
TEST_F(TreeDifferTest, FileDeleted) {
    TreeDiffer differ;
    TreeNode base = createSimpleTree();
    TreeNode target = createEmptyTree();
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().filesAdded, 0);
    EXPECT_EQ(result.value().filesDeleted, 1);
    
    const auto& change = result.value().changes[0];
    EXPECT_EQ(change.type, ChangeType::Deleted);
    EXPECT_EQ(change.oldPath, "file1.txt");
    EXPECT_EQ(change.oldHash, "hash1");
}

// Test: File modified
TEST_F(TreeDifferTest, FileModified) {
    TreeDiffer differ;
    TreeNode base = createSimpleTree();
    TreeNode target = createSimpleTree();
    
    // Modify the file hash in target
    TreeEntry modified;
    modified.mode = 0100644;
    modified.name = "file1.txt";
    modified.hash = "hash1_modified";
    modified.isDirectory = false;
    modified.size = 200;
    
    target = TreeNode();
    target.addEntry(modified);
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().filesModified, 1);
    
    const auto& change = result.value().changes[0];
    EXPECT_EQ(change.type, ChangeType::Modified);
    EXPECT_EQ(change.oldPath, "file1.txt");
    EXPECT_EQ(change.newPath, "file1.txt");
    EXPECT_EQ(change.oldHash, "hash1");
    EXPECT_EQ(change.newHash, "hash1_modified");
}

// Test: File renamed (same hash, different path)
TEST_F(TreeDifferTest, FileRenamed) {
    TreeDiffer differ;
    TreeNode base = createSimpleTree();
    TreeNode target;
    
    // Same file, different name
    TreeEntry renamed;
    renamed.mode = 0100644;
    renamed.name = "file1_renamed.txt";
    renamed.hash = "hash1";  // Same hash!
    renamed.isDirectory = false;
    renamed.size = 100;
    target.addEntry(renamed);
    
    DiffOptions options;
    options.detectRenames = true;
    
    auto result = differ.computeDiff(base, target, options);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().filesRenamed, 1);
    
    const auto& change = result.value().changes[0];
    EXPECT_EQ(change.type, ChangeType::Renamed);
    EXPECT_EQ(change.oldPath, "file1.txt");
    EXPECT_EQ(change.newPath, "file1_renamed.txt");
    EXPECT_EQ(change.oldHash, "hash1");
    EXPECT_EQ(change.newHash, "hash1");
}

// Test: Rename detection disabled
TEST_F(TreeDifferTest, RenameDetectionDisabled) {
    TreeDiffer differ;
    TreeNode base = createSimpleTree();
    TreeNode target;
    
    TreeEntry renamed;
    renamed.mode = 0100644;
    renamed.name = "file1_renamed.txt";
    renamed.hash = "hash1";
    renamed.isDirectory = false;
    renamed.size = 100;
    target.addEntry(renamed);
    
    DiffOptions options;
    options.detectRenames = false;
    
    auto result = differ.computeDiff(base, target, options);
    ASSERT_TRUE(result.has_value());
    
    // Should see a delete and an add
    EXPECT_EQ(result.value().changes.size(), size_t(2));
    EXPECT_EQ(result.value().filesDeleted, 1);
    EXPECT_EQ(result.value().filesAdded, 1);
}

// Test: Multiple changes
TEST_F(TreeDifferTest, MultipleChanges) {
    TreeDiffer differ;
    TreeNode base = createTreeWithMultipleFiles();
    TreeNode target;
    
    // Keep a.txt (unchanged)
    TreeEntry a;
    a.mode = 0100644;
    a.name = "a.txt";
    a.hash = "hash_a";
    a.isDirectory = false;
    a.size = 50;
    target.addEntry(a);
    
    // Modify b.txt
    TreeEntry b;
    b.mode = 0100644;
    b.name = "b.txt";
    b.hash = "hash_b_modified";
    b.isDirectory = false;
    b.size = 80;
    target.addEntry(b);
    
    // Delete c.txt (not in target)
    
    // Add d.txt
    TreeEntry d;
    d.mode = 0100644;
    d.name = "d.txt";
    d.hash = "hash_d";
    d.isDirectory = false;
    d.size = 90;
    target.addEntry(d);
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    // Should have: 1 modified, 1 deleted, 1 added
    EXPECT_EQ(result.value().changes.size(), size_t(3));
    EXPECT_EQ(result.value().filesAdded, 1);
    EXPECT_EQ(result.value().filesDeleted, 1);
    EXPECT_EQ(result.value().filesModified, 1);
}

// Test: Exclude patterns
TEST_F(TreeDifferTest, ExcludePatterns) {
    TreeDiffer differ;
    TreeNode base;
    TreeNode target;
    
    // Add files to target
    TreeEntry f1;
    f1.mode = 0100644;
    f1.name = "file.txt";
    f1.hash = "hash1";
    f1.isDirectory = false;
    f1.size = 100;
    target.addEntry(f1);
    
    TreeEntry f2;
    f2.mode = 0100644;
    f2.name = "file.log";
    f2.hash = "hash2";
    f2.isDirectory = false;
    f2.size = 50;
    target.addEntry(f2);
    
    DiffOptions options;
    options.excludePatterns = {"*.log"};
    
    auto result = differ.computeDiff(base, target, options);
    ASSERT_TRUE(result.has_value());
    
    // Should only see file.txt added (file.log excluded)
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().changes[0].newPath, "file.txt");
}

// Test: Directory changes
TEST_F(TreeDifferTest, DirectoryChanges) {
    TreeDiffer differ;
    TreeNode base;
    TreeNode target;
    
    // Add directory to target
    TreeEntry dir;
    dir.mode = 040755;
    dir.name = "subdir";
    dir.hash = "dir_hash1";
    dir.isDirectory = true;
    dir.size = -1;
    target.addEntry(dir);
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().dirsAdded, 1);
    EXPECT_TRUE(result.value().changes[0].isDirectory);
}

// Test: Serialize and diff from data
TEST_F(TreeDifferTest, DiffFromSerializedData) {
    TreeDiffer differ;
    TreeNode base = createSimpleTree();
    TreeNode target = createEmptyTree();
    
    // Serialize trees
    std::vector<uint8_t> baseData = base.serialize();
    std::vector<uint8_t> targetData = target.serialize();
    
    auto result = differ.computeDiffFromData(baseData, targetData);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(1));
    EXPECT_EQ(result.value().filesDeleted, 1);
}

// Test: Large diff (many files)
TEST_F(TreeDifferTest, LargeDiff) {
    TreeDiffer differ;
    TreeNode base;
    TreeNode target;
    
    // Add 100 files to base
    for (int i = 0; i < 100; ++i) {
        TreeEntry entry;
        entry.mode = 0100644;
        entry.name = "file" + std::to_string(i) + ".txt";
        entry.hash = "hash" + std::to_string(i);
        entry.isDirectory = false;
        entry.size = i * 10;
        base.addEntry(entry);
    }
    
    // Add 100 different files to target
    for (int i = 0; i < 100; ++i) {
        TreeEntry entry;
        entry.mode = 0100644;
        entry.name = "newfile" + std::to_string(i) + ".txt";
        entry.hash = "newhash" + std::to_string(i);
        entry.isDirectory = false;
        entry.size = i * 15;
        target.addEntry(entry);
    }
    
    auto result = differ.computeDiff(base, target);
    ASSERT_TRUE(result.has_value());
    
    EXPECT_EQ(result.value().changes.size(), size_t(200));
    EXPECT_EQ(result.value().filesDeleted, 100);
    EXPECT_EQ(result.value().filesAdded, 100);
}

// Test: Change type to string
TEST_F(TreeDifferTest, ChangeTypeToString) {
    EXPECT_STREQ(changeTypeToString(ChangeType::Added), "Added");
    EXPECT_STREQ(changeTypeToString(ChangeType::Deleted), "Deleted");
    EXPECT_STREQ(changeTypeToString(ChangeType::Modified), "Modified");
    EXPECT_STREQ(changeTypeToString(ChangeType::Renamed), "Renamed");
    EXPECT_STREQ(changeTypeToString(ChangeType::Moved), "Moved");
}
